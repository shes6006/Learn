<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 1. 掃描組件 -->
	<context:component-scan
		base-package="eoschu.httpMessageConverter" />
	<!-- 2. 視圖解析器 -->
	<!-- a. 使用jsp寫internal -->
	<!-- <bean id="index" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="order" value="1"></property> <property name="prefix" value="/WEB-INF/"></property> 
		<property name="suffix" value=".jsp"></property> </bean> -->

	<!-- b. 使用html寫Thymeleaf -->
	<bean id="viewResolver"
		class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
		<property name="order" value="1" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="templateEngine">
			<bean class="org.thymeleaf.spring5.SpringTemplateEngine">
				<property name="templateResolver">
					<bean
						class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
						<!-- 视图前缀 -->
						<property name="prefix" value="/WEB-INF/templates/" />

						<!-- 视图后缀 -->
						<property name="suffix" value=".html" />
						<property name="templateMode" value="HTML5" />
						<property name="characterEncoding" value="UTF-8" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 攔截器 -->
	<!-- 方法有三種 bean ref mvc:interceptors -->

	<!-- 第一種 -->
	<!-- <bean class="com.atguigu.interceptor.firstInterceptor"></bean> -->

	<!-- 第二種 -->
	<!-- <ref bean="firstInterceptor"></ref> -->
	<!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->

	<!-- 第三種 -->
	<!-- 以上配置方式可以對特地區域利用ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求， 通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求 -->
	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/*" /> <mvc:exclude-mapping 
		path="/" /> <ref bean="firstInterceptor" /> </mvc:interceptor> </mvc:interceptors> -->

	<!-- 文件上傳解析器，將上傳的文件封裝為Multipart id必須設置 mvc 利用id來找 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArithmeticException">error</prop>
			</props>
		</property>
		<property name="exceptionAttribute" value="ex"></property>
	</bean>

	<!-- 处理静态资源，例如html、js、css、jpg 若只设置该标签，则只能访问静态资源，其他请求则无法访问 此时必须设置解决问题 -->
	<mvc:default-servlet-handler />

	<!-- Controller -->
	<!-- 建立訪問首頁的controller -->
	<mvc:view-controller path="/" view-name="index"></mvc:view-controller>
	<!-- 單一跳轉頁面實現下載 -->
	<mvc:view-controller path="/file" view-name="file"></mvc:view-controller>


	<!-- 开启mvc注解驱动 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- 处理响应中文内容乱码 -->
			<bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="defaultCharset" value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<value>text/html</value>
						<value>application/json</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>


</beans>